{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.0.0\n"
     ]
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "from sklearn.datasets import load_diabetes\n",
    "print(tf.__version__)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Validation, regularisation and callbacks"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " ## Coding tutorials\n",
    " #### [1. Validation sets](#coding_tutorial_1)\n",
    " #### [2. Model regularisation](#coding_tutorial_2)\n",
    " #### [3. Introduction to callbacks](#coding_tutorial_3)\n",
    " #### [4. Early stopping / patience](#coding_tutorial_4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "<a id=\"coding_tutorial_1\"></a>\n",
    "## Validation sets"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Load the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      ".. _diabetes_dataset:\n",
      "\n",
      "Diabetes dataset\n",
      "----------------\n",
      "\n",
      "Ten baseline variables, age, sex, body mass index, average blood\n",
      "pressure, and six blood serum measurements were obtained for each of n =\n",
      "442 diabetes patients, as well as the response of interest, a\n",
      "quantitative measure of disease progression one year after baseline.\n",
      "\n",
      "**Data Set Characteristics:**\n",
      "\n",
      "  :Number of Instances: 442\n",
      "\n",
      "  :Number of Attributes: First 10 columns are numeric predictive values\n",
      "\n",
      "  :Target: Column 11 is a quantitative measure of disease progression one year after baseline\n",
      "\n",
      "  :Attribute Information:\n",
      "      - Age\n",
      "      - Sex\n",
      "      - Body mass index\n",
      "      - Average blood pressure\n",
      "      - S1\n",
      "      - S2\n",
      "      - S3\n",
      "      - S4\n",
      "      - S5\n",
      "      - S6\n",
      "\n",
      "Note: Each of these 10 feature variables have been mean centered and scaled by the standard deviation times `n_samples` (i.e. the sum of squares of each column totals 1).\n",
      "\n",
      "Source URL:\n",
      "http://www4.stat.ncsu.edu/~boos/var.select/diabetes.html\n",
      "\n",
      "For more information see:\n",
      "Bradley Efron, Trevor Hastie, Iain Johnstone and Robert Tibshirani (2004) \"Least Angle Regression,\" Annals of Statistics (with discussion), 407-499.\n",
      "(http://web.stanford.edu/~hastie/Papers/LARS/LeastAngle_2002.pdf)\n"
     ]
    }
   ],
   "source": [
    "# Load the diabetes dataset\n",
    "diabetes_dataset = load_diabetes()\n",
    "print(diabetes_dataset[\"DESCR\"])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dict_keys(['data', 'target', 'DESCR', 'feature_names', 'data_filename', 'target_filename'])\n"
     ]
    }
   ],
   "source": [
    "# Save the input and target variables\n",
    "print(diabetes_dataset.keys())\n",
    "data = diabetes_dataset[\"data\"]\n",
    "targets = diabetes_dataset[\"target\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-1.47194752e-02 -1.00165882e+00 -1.44579915e-01  6.99512942e-01\n",
      " -2.22496178e-01 -7.15965848e-01 -1.83538046e-01 -1.15749134e+00\n",
      " -5.47147277e-01  2.05006151e+00 -6.64021672e-01 -1.07957508e+00\n",
      "  3.48889755e-01  4.26806019e-01 -4.43258925e-01  2.45001404e-01\n",
      "  1.80071184e-01 -1.05621783e-01 -7.15965848e-01  2.06043272e-01\n",
      " -1.09256112e+00 -1.33929596e+00 -1.09256112e+00  1.20596866e+00\n",
      "  4.13819975e-01  6.47568766e-01 -1.96524090e-01 -8.71798376e-01\n",
      " -2.74440354e-01  1.69943833e+00 -3.00412442e-01 -1.20943552e+00\n",
      "  2.45262887e+00 -8.45826288e-01 -1.13151925e+00 -6.51035629e-01\n",
      "  1.46568953e+00  1.60853602e+00  1.29687096e+00 -8.06868156e-01\n",
      " -6.77007716e-01 -1.26137969e+00 -1.18346343e+00 -7.80896068e-01\n",
      "  1.38777327e+00 -1.28735178e+00  4.91736239e-01 -1.31593871e-01\n",
      " -1.00165882e+00 -1.31593871e-01  3.72247006e-02  9.46247777e-01\n",
      " -1.20943552e+00 -6.25063541e-01  3.87847887e-01 -3.13398486e-01\n",
      " -1.30033783e+00 -1.49512849e+00  2.32015360e-01  2.32015360e-01\n",
      " -1.18346343e+00 -1.05621783e-01 -1.30033783e+00 -3.13398486e-01\n",
      " -1.05360299e+00  1.41113052e-01 -2.77055191e-02 -7.15965848e-01\n",
      "  1.02154920e-01  3.35903711e-01 -1.35228200e+00  1.53061975e+00\n",
      "  6.47568766e-01 -5.34161233e-01 -8.71798376e-01 -1.43019827e+00\n",
      "  2.32015360e-01  6.21596678e-01  1.29687096e+00 -5.08189145e-01\n",
      " -1.18607827e-01 -1.31332387e+00 -1.30033783e+00  7.51457118e-01\n",
      " -1.13151925e+00 -1.44579915e-01 -1.26137969e+00 -2.35482222e-01\n",
      " -1.43019827e+00 -5.34161233e-01 -7.02979804e-01  1.54099096e-01\n",
      " -1.35228200e+00 -7.28951892e-01 -8.06868156e-01  1.28127008e-01\n",
      " -2.77055191e-02  1.64749415e+00 -7.80896068e-01 -8.97770464e-01\n",
      " -3.13398486e-01 -6.51035629e-01  1.94617316e+00  5.95624590e-01\n",
      " -7.41937936e-01 -1.28735178e+00 -2.35482222e-01 -1.05621783e-01\n",
      "  1.03715008e+00 -9.23742551e-01 -6.25063541e-01 -1.20943552e+00\n",
      "  1.21895470e+00  1.88124294e+00  1.37478723e+00  9.98191953e-01\n",
      "  1.59554997e+00  1.67346624e+00  3.48889755e-01  6.21596678e-01\n",
      "  6.21596678e-01  2.70973492e-01  3.61875799e-01 -8.84784420e-01\n",
      " -4.04300794e-01  1.15140964e-01 -6.89993760e-01 -5.60133321e-01\n",
      " -4.82217057e-01  1.50464767e+00  1.58256393e+00  7.61828325e-02\n",
      " -5.86105409e-01 -8.97770464e-01 -6.38049585e-01  1.55659184e+00\n",
      " -8.71798376e-01  1.66048019e+00  2.38769865e+00  1.67346624e+00\n",
      " -4.43258925e-01  2.14096382e+00  1.07610822e+00 -1.19644947e+00\n",
      "  2.83959536e-01  1.38777327e+00  3.35903711e-01 -3.13398486e-01\n",
      " -7.28951892e-01 -3.39370574e-01  1.76436855e+00 -8.32840244e-01\n",
      "  1.81631272e+00 -1.05360299e+00  5.82638546e-01  4.39792063e-01\n",
      " -1.65096101e+00 -8.84784420e-01 -7.28951892e-01  5.56666458e-01\n",
      " -1.28735178e+00  8.42359425e-01  2.57987448e-01 -2.74440354e-01\n",
      "  8.03401293e-01 -1.20943552e+00 -1.06658903e+00  8.81317557e-01\n",
      "  1.50464767e+00 -1.73343121e-03 -1.36526805e+00 -1.01464486e+00\n",
      "  1.85527085e+00 -6.64021672e-01 -1.47194752e-02 -3.26384530e-01\n",
      "  1.10208030e+00  9.46247777e-01 -9.23742551e-01 -1.47194752e-02\n",
      " -5.86105409e-01 -1.14450530e+00 -1.83538046e-01  4.26806019e-01\n",
      "  1.46568953e+00 -6.64021672e-01 -1.96524090e-01 -1.18607827e-01\n",
      " -1.44579915e-01 -9.49714639e-01  1.81631272e+00  3.35903711e-01\n",
      " -7.93882112e-01 -4.69231013e-01 -8.58812332e-01 -3.91314750e-01\n",
      " -1.04061695e+00 -3.00412442e-01 -1.31593871e-01 -8.06868156e-01\n",
      "  7.61828325e-02 -1.46915640e+00  5.69652502e-01  9.07289645e-01\n",
      "  1.62152206e+00 -6.89993760e-01  5.69652502e-01  6.47568766e-01\n",
      "  3.72247006e-02 -9.75686727e-01  5.04722283e-01 -1.06658903e+00\n",
      " -1.02763090e+00 -1.33929596e+00 -1.13151925e+00  1.43971745e+00\n",
      "  1.24492679e+00  1.86825690e+00  8.03401293e-01  4.26806019e-01\n",
      " -9.62700683e-01 -7.67910024e-01  1.29687096e+00 -2.77055191e-02\n",
      " -9.75686727e-01  7.25485030e-01 -9.75686727e-01 -5.73119365e-01\n",
      "  1.02154920e-01 -1.28735178e+00  8.81317557e-01  2.42386567e-02\n",
      "  1.38777327e+00 -8.06868156e-01  1.21895470e+00 -3.65342662e-01\n",
      " -1.10554717e+00 -1.04061695e+00  1.36180118e+00  1.42673140e+00\n",
      "  1.59554997e+00  3.22917667e-01 -1.05360299e+00 -1.36526805e+00\n",
      "  4.52778107e-01 -3.52356618e-01 -9.62700683e-01 -1.31332387e+00\n",
      "  1.37478723e+00  8.16387337e-01  1.95915920e+00  1.17999657e+00\n",
      " -7.93882112e-01 -2.77055191e-02  2.05006151e+00  1.12526127e-02\n",
      "  2.51755909e+00 -1.15749134e+00 -8.19854200e-01 -1.32630991e+00\n",
      " -1.46915640e+00 -6.38049585e-01  2.02408942e+00 -4.69231013e-01\n",
      " -9.26357388e-02 -1.01464486e+00 -1.39124013e+00 -4.82217057e-01\n",
      "  1.45270349e+00 -8.45826288e-01  6.47568766e-01 -3.26384530e-01\n",
      "  3.87847887e-01  1.15402448e+00 -1.11853321e+00 -7.54923980e-01\n",
      "  1.69943833e+00 -1.14450530e+00 -6.51035629e-01  6.21596678e-01\n",
      "  1.46568953e+00 -7.54923980e-01  1.01117800e+00  3.74861843e-01\n",
      "  5.02107446e-02  1.05013613e+00 -1.19644947e+00  8.68331513e-01\n",
      " -9.36728595e-01 -1.09256112e+00  2.33575448e+00  1.24492679e+00\n",
      " -8.84784420e-01  6.21596678e-01 -1.26137969e+00 -8.71798376e-01\n",
      " -8.19854200e-01 -1.57304475e+00 -3.00412442e-01 -8.97770464e-01\n",
      "  1.59554997e+00 -1.13151925e+00  5.95624590e-01  1.08909426e+00\n",
      "  1.30985701e+00 -3.65342662e-01 -1.40422618e+00  2.57987448e-01\n",
      " -4.95203101e-01 -1.31593871e-01 -5.60133321e-01  3.61875799e-01\n",
      " -1.05621783e-01  1.41113052e-01 -6.66636509e-02 -7.15965848e-01\n",
      "  8.81317557e-01  4.91736239e-01 -5.60133321e-01  5.04722283e-01\n",
      " -3.91314750e-01  1.01117800e+00  1.16701052e+00  1.24492679e+00\n",
      "  1.25791283e+00  5.17708327e-01 -2.74440354e-01  1.10208030e+00\n",
      " -9.62700683e-01 -2.22496178e-01  1.19298261e+00  6.08610634e-01\n",
      "  1.53061975e+00  1.54099096e-01 -1.04061695e+00 -7.28951892e-01\n",
      "  1.99811734e+00 -7.93882112e-01  8.03401293e-01 -7.41937936e-01\n",
      "  8.29373381e-01  1.43971745e+00  3.35903711e-01 -5.08189145e-01\n",
      "  6.21596678e-01 -1.70552003e-01 -1.70552003e-01 -8.32840244e-01\n",
      " -5.36776070e-02 -8.32840244e-01  1.17999657e+00 -1.05360299e+00\n",
      " -9.75686727e-01 -5.60133321e-01  1.55659184e+00 -1.19644947e+00\n",
      " -1.27436574e+00  8.94303601e-01 -8.06868156e-01  2.06304756e+00\n",
      "  1.67346624e+00  3.87847887e-01  2.19290800e+00 -1.22242156e+00\n",
      "  1.42673140e+00  6.99512942e-01  1.05013613e+00  1.16701052e+00\n",
      " -3.78328706e-01  1.93057228e-01 -1.15749134e+00  5.82638546e-01\n",
      " -1.05360299e+00  2.06043272e-01 -1.57565959e-01  8.42359425e-01\n",
      " -4.04300794e-01  1.07610822e+00  1.20596866e+00 -1.45617035e+00\n",
      " -1.30033783e+00 -6.25063541e-01 -2.61454310e-01 -8.32840244e-01\n",
      " -1.07957508e+00  8.68331513e-01 -1.04061695e+00  6.34582722e-01\n",
      " -5.47147277e-01 -1.31332387e+00  1.62152206e+00 -1.15749134e+00\n",
      " -4.43258925e-01 -1.07957508e+00  1.56957789e+00  1.37478723e+00\n",
      " -1.41721222e+00  5.95624590e-01  1.16701052e+00  1.03715008e+00\n",
      "  2.96945580e-01 -7.67910024e-01  2.06043272e-01  1.59554997e+00\n",
      "  1.82929877e+00  1.67346624e+00 -1.04061695e+00 -1.57565959e-01\n",
      "  4.78750195e-01  3.74861843e-01  7.38471074e-01 -2.09510134e-01\n",
      "  1.41374536e+00 -5.08189145e-01 -2.74440354e-01  2.83959536e-01\n",
      "  1.36180118e+00 -1.26137969e+00 -8.84784420e-01 -1.43019827e+00\n",
      " -7.96496949e-02  7.77429206e-01  1.05013613e+00 -7.93882112e-01\n",
      " -5.34161233e-01 -1.73343121e-03 -4.17286837e-01 -1.10554717e+00\n",
      "  2.05006151e+00 -7.54923980e-01  4.00833931e-01 -1.11853321e+00\n",
      "  2.70973492e-01 -1.04061695e+00 -1.33929596e+00 -1.14450530e+00\n",
      " -1.35228200e+00  3.35903711e-01 -6.25063541e-01 -2.61454310e-01\n",
      "  8.81317557e-01 -1.23540761e+00]\n"
     ]
    }
   ],
   "source": [
    "# Normalise the target data (this will make clearer training curves)\n",
    "targets = (targets - targets.mean(axis=0))/ targets.std()\n",
    "print(targets)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(397, 10)\n",
      "(45, 10)\n",
      "(397,)\n",
      "(45,)\n"
     ]
    }
   ],
   "source": [
    "# Split the data into train and test sets\n",
    "from sklearn.model_selection import train_test_split\n",
    "train_data, test_data, train_targets, test_targets = train_test_split(data, targets, test_size=0.1)\n",
    "print(train_data.shape)\n",
    "print(test_data.shape)\n",
    "print(train_targets.shape)\n",
    "print(test_targets.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Train a feedforward neural network model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Build the model\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense\n",
    "\n",
    "def get_model():\n",
    "    model = Sequential()\n",
    "    model.add(Dense(128, activation='relu', input_shape=(train_data.shape[1],)))\n",
    "    model.add(Dense(128, activation=\"relu\"))\n",
    "    model.add(Dense(128, activation=\"relu\"))\n",
    "    model.add(Dense(128, activation='relu'))\n",
    "    model.add(Dense(128, activation='relu'))\n",
    "    model.add(Dense(128, activation='relu'))\n",
    "    model.add(Dense(1, activation='relu'))\n",
    "    \n",
    "    return model \n",
    "\n",
    "model = get_model()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "dense (Dense)                (None, 128)               1408      \n",
      "_________________________________________________________________\n",
      "dense_1 (Dense)              (None, 128)               16512     \n",
      "_________________________________________________________________\n",
      "dense_2 (Dense)              (None, 128)               16512     \n",
      "_________________________________________________________________\n",
      "dense_3 (Dense)              (None, 128)               16512     \n",
      "_________________________________________________________________\n",
      "dense_4 (Dense)              (None, 128)               16512     \n",
      "_________________________________________________________________\n",
      "dense_5 (Dense)              (None, 128)               16512     \n",
      "_________________________________________________________________\n",
      "dense_6 (Dense)              (None, 1)                 129       \n",
      "=================================================================\n",
      "Total params: 84,097\n",
      "Trainable params: 84,097\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "# Print the model summary\n",
    "model.summary()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Compile the model\n",
    "model.compile(loss='mse', optimizer='adam', metrics=['mse'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 198 samples, validate on 199 samples\n",
      "Epoch 1/10\n",
      "198/198 - 1s - loss: 1.0382 - mse: 1.0382 - val_loss: 0.9578 - val_mse: 0.9578\n",
      "Epoch 2/10\n",
      "198/198 - 0s - loss: 1.0095 - mse: 1.0095 - val_loss: 0.9148 - val_mse: 0.9148\n",
      "Epoch 3/10\n",
      "198/198 - 0s - loss: 0.9491 - mse: 0.9491 - val_loss: 0.8451 - val_mse: 0.8451\n",
      "Epoch 4/10\n",
      "198/198 - 0s - loss: 0.8684 - mse: 0.8684 - val_loss: 0.7780 - val_mse: 0.7780\n",
      "Epoch 5/10\n",
      "198/198 - 0s - loss: 0.7914 - mse: 0.7914 - val_loss: 0.7715 - val_mse: 0.7715\n",
      "Epoch 6/10\n",
      "198/198 - 0s - loss: 0.7343 - mse: 0.7343 - val_loss: 0.7335 - val_mse: 0.7335\n",
      "Epoch 7/10\n",
      "198/198 - 0s - loss: 0.7500 - mse: 0.7500 - val_loss: 0.7137 - val_mse: 0.7137\n",
      "Epoch 8/10\n",
      "198/198 - 0s - loss: 0.7011 - mse: 0.7011 - val_loss: 0.7501 - val_mse: 0.7501\n",
      "Epoch 9/10\n",
      "198/198 - 0s - loss: 0.6854 - mse: 0.6854 - val_loss: 0.6991 - val_mse: 0.6991\n",
      "Epoch 10/10\n",
      "198/198 - 0s - loss: 0.6903 - mse: 0.6903 - val_loss: 0.7035 - val_mse: 0.7035\n"
     ]
    }
   ],
   "source": [
    "# Train the model, with some of the data reserved for validation\n",
    "history = model.fit(train_data, train_targets, epochs = 10, validation_split=0.5,\n",
    "                    batch_size=64, verbose=2)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "45/1 - 0s - loss: 0.8062 - mse: 0.7493\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[0.7492585036489698, 0.7492585]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Evaluate the model on the test set\n",
    "model.evaluate(test_data, test_targets, verbose=2)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Plot the learning curves"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the training and validation loss\n",
    "\n",
    "plt.plot(history.history['loss'])\n",
    "plt.plot(history.history['val_loss'])\n",
    "plt.title('Loss vs. epochs')\n",
    "plt.ylabel('Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.legend(['Training', 'Validation'], loc='upper right')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "<a id=\"coding_tutorial_2\"></a>\n",
    "## Model regularisation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Adding regularisation with weight decay and dropout"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "from tensorflow.keras.layers import Dropout\n",
    "from tensorflow.keras import regularizers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_regularised_model(wd, rate):\n",
    "    model = Sequential([\n",
    "        Dense(128, activation=\"relu\", kernel_regularizer=regularizers.l2(wd), input_shape=(train_data.shape[1],)),\n",
    "        Dropout(rate),\n",
    "        Dense(128, activation=\"relu\", kernel_regularizer=regularizers.l2(wd)),\n",
    "        Dropout(rate),\n",
    "        Dense(128, activation=\"relu\", kernel_regularizer=regularizers.l2(wd)),\n",
    "        Dropout(rate),\n",
    "        Dense(128, activation=\"relu\", kernel_regularizer=regularizers.l2(wd)),\n",
    "        Dropout(rate),\n",
    "        Dense(128, activation=\"relu\", kernel_regularizer=regularizers.l2(wd)),\n",
    "        Dropout(rate),\n",
    "        Dense(128, activation=\"relu\", kernel_regularizer=regularizers.l2(wd)),\n",
    "        Dense(1)\n",
    "    ])\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Re-build the model with weight decay and dropout layers\n",
    "model = get_regularised_model(1e-5, 0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Compile the model\n",
    "model.compile(optimizer='adam', loss=\"mse\", metrics=[\"mse\"])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 337 samples, validate on 60 samples\n",
      "Epoch 1/100\n",
      "337/337 - 2s - loss: 1.0425 - mse: 1.0359 - val_loss: 0.8712 - val_mse: 0.8646\n",
      "Epoch 2/100\n",
      "337/337 - 0s - loss: 1.0303 - mse: 1.0237 - val_loss: 0.8431 - val_mse: 0.8366\n",
      "Epoch 3/100\n",
      "337/337 - 0s - loss: 0.9880 - mse: 0.9814 - val_loss: 0.7658 - val_mse: 0.7593\n",
      "Epoch 4/100\n",
      "337/337 - 0s - loss: 0.8979 - mse: 0.8913 - val_loss: 0.6070 - val_mse: 0.6004\n",
      "Epoch 5/100\n",
      "337/337 - 0s - loss: 0.7136 - mse: 0.7070 - val_loss: 0.6057 - val_mse: 0.5992\n",
      "Epoch 6/100\n",
      "337/337 - 0s - loss: 0.7143 - mse: 0.7077 - val_loss: 0.5944 - val_mse: 0.5879\n",
      "Epoch 7/100\n",
      "337/337 - 0s - loss: 0.5991 - mse: 0.5926 - val_loss: 0.5408 - val_mse: 0.5343\n",
      "Epoch 8/100\n",
      "337/337 - 0s - loss: 0.5557 - mse: 0.5492 - val_loss: 0.5498 - val_mse: 0.5433\n",
      "Epoch 9/100\n",
      "337/337 - 0s - loss: 0.5526 - mse: 0.5461 - val_loss: 0.5517 - val_mse: 0.5452\n",
      "Epoch 10/100\n",
      "337/337 - 0s - loss: 0.5453 - mse: 0.5387 - val_loss: 0.5414 - val_mse: 0.5348\n",
      "Epoch 11/100\n",
      "337/337 - 0s - loss: 0.5251 - mse: 0.5185 - val_loss: 0.5710 - val_mse: 0.5645\n",
      "Epoch 12/100\n",
      "337/337 - 0s - loss: 0.5373 - mse: 0.5308 - val_loss: 0.5444 - val_mse: 0.5379\n",
      "Epoch 13/100\n",
      "337/337 - 0s - loss: 0.5487 - mse: 0.5422 - val_loss: 0.5675 - val_mse: 0.5610\n",
      "Epoch 14/100\n",
      "337/337 - 0s - loss: 0.5501 - mse: 0.5435 - val_loss: 0.5531 - val_mse: 0.5466\n",
      "Epoch 15/100\n",
      "337/337 - 0s - loss: 0.5177 - mse: 0.5112 - val_loss: 0.5534 - val_mse: 0.5468\n",
      "Epoch 16/100\n",
      "337/337 - 0s - loss: 0.5129 - mse: 0.5063 - val_loss: 0.5403 - val_mse: 0.5338\n",
      "Epoch 17/100\n",
      "337/337 - 0s - loss: 0.5171 - mse: 0.5106 - val_loss: 0.5481 - val_mse: 0.5416\n",
      "Epoch 18/100\n",
      "337/337 - 0s - loss: 0.5177 - mse: 0.5112 - val_loss: 0.5544 - val_mse: 0.5479\n",
      "Epoch 19/100\n",
      "337/337 - 0s - loss: 0.5172 - mse: 0.5107 - val_loss: 0.5477 - val_mse: 0.5412\n",
      "Epoch 20/100\n",
      "337/337 - 0s - loss: 0.5093 - mse: 0.5028 - val_loss: 0.5275 - val_mse: 0.5210\n",
      "Epoch 21/100\n",
      "337/337 - 0s - loss: 0.4843 - mse: 0.4778 - val_loss: 0.5398 - val_mse: 0.5333\n",
      "Epoch 22/100\n",
      "337/337 - 0s - loss: 0.5034 - mse: 0.4969 - val_loss: 0.5331 - val_mse: 0.5266\n",
      "Epoch 23/100\n",
      "337/337 - 0s - loss: 0.5148 - mse: 0.5083 - val_loss: 0.5190 - val_mse: 0.5125\n",
      "Epoch 24/100\n",
      "337/337 - 0s - loss: 0.4926 - mse: 0.4861 - val_loss: 0.5467 - val_mse: 0.5402\n",
      "Epoch 25/100\n",
      "337/337 - 0s - loss: 0.4852 - mse: 0.4787 - val_loss: 0.5286 - val_mse: 0.5221\n",
      "Epoch 26/100\n",
      "337/337 - 0s - loss: 0.4959 - mse: 0.4895 - val_loss: 0.5267 - val_mse: 0.5202\n",
      "Epoch 27/100\n",
      "337/337 - 0s - loss: 0.4940 - mse: 0.4875 - val_loss: 0.5098 - val_mse: 0.5033\n",
      "Epoch 28/100\n",
      "337/337 - 0s - loss: 0.4731 - mse: 0.4667 - val_loss: 0.5418 - val_mse: 0.5353\n",
      "Epoch 29/100\n",
      "337/337 - 0s - loss: 0.4835 - mse: 0.4770 - val_loss: 0.4956 - val_mse: 0.4891\n",
      "Epoch 30/100\n",
      "337/337 - 0s - loss: 0.4865 - mse: 0.4800 - val_loss: 0.5229 - val_mse: 0.5164\n",
      "Epoch 31/100\n",
      "337/337 - 0s - loss: 0.4982 - mse: 0.4917 - val_loss: 0.4924 - val_mse: 0.4859\n",
      "Epoch 32/100\n",
      "337/337 - 0s - loss: 0.4867 - mse: 0.4802 - val_loss: 0.5048 - val_mse: 0.4984\n",
      "Epoch 33/100\n",
      "337/337 - 0s - loss: 0.4439 - mse: 0.4374 - val_loss: 0.5141 - val_mse: 0.5076\n",
      "Epoch 34/100\n",
      "337/337 - 0s - loss: 0.4719 - mse: 0.4654 - val_loss: 0.5178 - val_mse: 0.5114\n",
      "Epoch 35/100\n",
      "337/337 - 0s - loss: 0.4995 - mse: 0.4930 - val_loss: 0.5292 - val_mse: 0.5227\n",
      "Epoch 36/100\n",
      "337/337 - 0s - loss: 0.4838 - mse: 0.4773 - val_loss: 0.4843 - val_mse: 0.4778\n",
      "Epoch 37/100\n",
      "337/337 - 0s - loss: 0.4745 - mse: 0.4681 - val_loss: 0.5385 - val_mse: 0.5320\n",
      "Epoch 38/100\n",
      "337/337 - 0s - loss: 0.4806 - mse: 0.4741 - val_loss: 0.5174 - val_mse: 0.5109\n",
      "Epoch 39/100\n",
      "337/337 - 0s - loss: 0.4742 - mse: 0.4677 - val_loss: 0.4786 - val_mse: 0.4722\n",
      "Epoch 40/100\n",
      "337/337 - 0s - loss: 0.4695 - mse: 0.4630 - val_loss: 0.5189 - val_mse: 0.5124\n",
      "Epoch 41/100\n",
      "337/337 - 0s - loss: 0.4878 - mse: 0.4813 - val_loss: 0.5048 - val_mse: 0.4983\n",
      "Epoch 42/100\n",
      "337/337 - 0s - loss: 0.4629 - mse: 0.4564 - val_loss: 0.4858 - val_mse: 0.4793\n",
      "Epoch 43/100\n",
      "337/337 - 0s - loss: 0.4252 - mse: 0.4187 - val_loss: 0.5135 - val_mse: 0.5070\n",
      "Epoch 44/100\n",
      "337/337 - 0s - loss: 0.4409 - mse: 0.4344 - val_loss: 0.5026 - val_mse: 0.4961\n",
      "Epoch 45/100\n",
      "337/337 - 0s - loss: 0.4415 - mse: 0.4350 - val_loss: 0.5289 - val_mse: 0.5224\n",
      "Epoch 46/100\n",
      "337/337 - 0s - loss: 0.4399 - mse: 0.4334 - val_loss: 0.5255 - val_mse: 0.5191\n",
      "Epoch 47/100\n",
      "337/337 - 0s - loss: 0.4411 - mse: 0.4346 - val_loss: 0.5278 - val_mse: 0.5213\n",
      "Epoch 48/100\n",
      "337/337 - 0s - loss: 0.4251 - mse: 0.4186 - val_loss: 0.5094 - val_mse: 0.5029\n",
      "Epoch 49/100\n",
      "337/337 - 0s - loss: 0.4426 - mse: 0.4361 - val_loss: 0.5405 - val_mse: 0.5340\n",
      "Epoch 50/100\n",
      "337/337 - 0s - loss: 0.4786 - mse: 0.4721 - val_loss: 0.4929 - val_mse: 0.4864\n",
      "Epoch 51/100\n",
      "337/337 - 0s - loss: 0.4600 - mse: 0.4535 - val_loss: 0.4749 - val_mse: 0.4684\n",
      "Epoch 52/100\n",
      "337/337 - 0s - loss: 0.4552 - mse: 0.4487 - val_loss: 0.5235 - val_mse: 0.5170\n",
      "Epoch 53/100\n",
      "337/337 - 0s - loss: 0.4480 - mse: 0.4415 - val_loss: 0.4669 - val_mse: 0.4604\n",
      "Epoch 54/100\n",
      "337/337 - 0s - loss: 0.4413 - mse: 0.4349 - val_loss: 0.5050 - val_mse: 0.4985\n",
      "Epoch 55/100\n",
      "337/337 - 0s - loss: 0.4265 - mse: 0.4200 - val_loss: 0.5248 - val_mse: 0.5184\n",
      "Epoch 56/100\n",
      "337/337 - 0s - loss: 0.4265 - mse: 0.4200 - val_loss: 0.4937 - val_mse: 0.4872\n",
      "Epoch 57/100\n",
      "337/337 - 0s - loss: 0.4274 - mse: 0.4209 - val_loss: 0.5156 - val_mse: 0.5092\n",
      "Epoch 58/100\n",
      "337/337 - 0s - loss: 0.4105 - mse: 0.4040 - val_loss: 0.5076 - val_mse: 0.5011\n",
      "Epoch 59/100\n",
      "337/337 - 0s - loss: 0.4053 - mse: 0.3988 - val_loss: 0.5381 - val_mse: 0.5316\n",
      "Epoch 60/100\n",
      "337/337 - 0s - loss: 0.4308 - mse: 0.4243 - val_loss: 0.5329 - val_mse: 0.5265\n",
      "Epoch 61/100\n",
      "337/337 - 0s - loss: 0.4468 - mse: 0.4403 - val_loss: 0.4937 - val_mse: 0.4873\n",
      "Epoch 62/100\n",
      "337/337 - 0s - loss: 0.4414 - mse: 0.4349 - val_loss: 0.5282 - val_mse: 0.5217\n",
      "Epoch 63/100\n",
      "337/337 - 0s - loss: 0.3881 - mse: 0.3817 - val_loss: 0.5110 - val_mse: 0.5045\n",
      "Epoch 64/100\n",
      "337/337 - 0s - loss: 0.3951 - mse: 0.3887 - val_loss: 0.5172 - val_mse: 0.5108\n",
      "Epoch 65/100\n",
      "337/337 - 0s - loss: 0.4248 - mse: 0.4184 - val_loss: 0.5298 - val_mse: 0.5233\n",
      "Epoch 66/100\n",
      "337/337 - 0s - loss: 0.4059 - mse: 0.3994 - val_loss: 0.4850 - val_mse: 0.4785\n",
      "Epoch 67/100\n",
      "337/337 - 0s - loss: 0.4151 - mse: 0.4086 - val_loss: 0.5366 - val_mse: 0.5301\n",
      "Epoch 68/100\n",
      "337/337 - 0s - loss: 0.4189 - mse: 0.4124 - val_loss: 0.5206 - val_mse: 0.5141\n",
      "Epoch 69/100\n",
      "337/337 - 0s - loss: 0.4396 - mse: 0.4332 - val_loss: 0.5261 - val_mse: 0.5196\n",
      "Epoch 70/100\n",
      "337/337 - 0s - loss: 0.4095 - mse: 0.4031 - val_loss: 0.5109 - val_mse: 0.5044\n",
      "Epoch 71/100\n",
      "337/337 - 0s - loss: 0.4257 - mse: 0.4192 - val_loss: 0.5094 - val_mse: 0.5029\n",
      "Epoch 72/100\n",
      "337/337 - 0s - loss: 0.4164 - mse: 0.4099 - val_loss: 0.5307 - val_mse: 0.5242\n",
      "Epoch 73/100\n",
      "337/337 - 0s - loss: 0.4099 - mse: 0.4035 - val_loss: 0.5408 - val_mse: 0.5343\n",
      "Epoch 74/100\n",
      "337/337 - 0s - loss: 0.3968 - mse: 0.3903 - val_loss: 0.5551 - val_mse: 0.5486\n",
      "Epoch 75/100\n",
      "337/337 - 0s - loss: 0.4224 - mse: 0.4159 - val_loss: 0.5426 - val_mse: 0.5361\n",
      "Epoch 76/100\n",
      "337/337 - 0s - loss: 0.4085 - mse: 0.4020 - val_loss: 0.5893 - val_mse: 0.5828\n",
      "Epoch 77/100\n",
      "337/337 - 0s - loss: 0.4012 - mse: 0.3948 - val_loss: 0.5186 - val_mse: 0.5121\n",
      "Epoch 78/100\n",
      "337/337 - 0s - loss: 0.4059 - mse: 0.3994 - val_loss: 0.5938 - val_mse: 0.5873\n",
      "Epoch 79/100\n",
      "337/337 - 0s - loss: 0.4227 - mse: 0.4162 - val_loss: 0.5165 - val_mse: 0.5100\n",
      "Epoch 80/100\n",
      "337/337 - 0s - loss: 0.3900 - mse: 0.3836 - val_loss: 0.5553 - val_mse: 0.5488\n",
      "Epoch 81/100\n",
      "337/337 - 0s - loss: 0.3715 - mse: 0.3650 - val_loss: 0.5179 - val_mse: 0.5114\n",
      "Epoch 82/100\n",
      "337/337 - 0s - loss: 0.3866 - mse: 0.3801 - val_loss: 0.5164 - val_mse: 0.5099\n",
      "Epoch 83/100\n",
      "337/337 - 0s - loss: 0.4004 - mse: 0.3939 - val_loss: 0.5042 - val_mse: 0.4977\n",
      "Epoch 84/100\n",
      "337/337 - 0s - loss: 0.3675 - mse: 0.3610 - val_loss: 0.5034 - val_mse: 0.4970\n",
      "Epoch 85/100\n",
      "337/337 - 0s - loss: 0.3868 - mse: 0.3803 - val_loss: 0.5195 - val_mse: 0.5130\n",
      "Epoch 86/100\n",
      "337/337 - 0s - loss: 0.3839 - mse: 0.3774 - val_loss: 0.4948 - val_mse: 0.4883\n",
      "Epoch 87/100\n",
      "337/337 - 0s - loss: 0.3779 - mse: 0.3714 - val_loss: 0.4958 - val_mse: 0.4893\n",
      "Epoch 88/100\n",
      "337/337 - 0s - loss: 0.3904 - mse: 0.3839 - val_loss: 0.5158 - val_mse: 0.5093\n",
      "Epoch 89/100\n",
      "337/337 - 0s - loss: 0.3886 - mse: 0.3821 - val_loss: 0.5327 - val_mse: 0.5262\n",
      "Epoch 90/100\n",
      "337/337 - 0s - loss: 0.3921 - mse: 0.3856 - val_loss: 0.5060 - val_mse: 0.4996\n",
      "Epoch 91/100\n",
      "337/337 - 0s - loss: 0.3811 - mse: 0.3746 - val_loss: 0.6394 - val_mse: 0.6329\n",
      "Epoch 92/100\n",
      "337/337 - 0s - loss: 0.4056 - mse: 0.3991 - val_loss: 0.4905 - val_mse: 0.4840\n",
      "Epoch 93/100\n",
      "337/337 - 0s - loss: 0.3891 - mse: 0.3826 - val_loss: 0.5365 - val_mse: 0.5300\n",
      "Epoch 94/100\n",
      "337/337 - 0s - loss: 0.4034 - mse: 0.3969 - val_loss: 0.5415 - val_mse: 0.5350\n",
      "Epoch 95/100\n",
      "337/337 - 0s - loss: 0.3798 - mse: 0.3733 - val_loss: 0.5587 - val_mse: 0.5522\n",
      "Epoch 96/100\n",
      "337/337 - 0s - loss: 0.3686 - mse: 0.3621 - val_loss: 0.5515 - val_mse: 0.5450\n",
      "Epoch 97/100\n",
      "337/337 - 0s - loss: 0.3730 - mse: 0.3665 - val_loss: 0.5506 - val_mse: 0.5441\n",
      "Epoch 98/100\n",
      "337/337 - 0s - loss: 0.3824 - mse: 0.3759 - val_loss: 0.5350 - val_mse: 0.5285\n",
      "Epoch 99/100\n",
      "337/337 - 0s - loss: 0.3862 - mse: 0.3797 - val_loss: 0.5300 - val_mse: 0.5235\n",
      "Epoch 100/100\n",
      "337/337 - 0s - loss: 0.3927 - mse: 0.3862 - val_loss: 0.5251 - val_mse: 0.5186\n"
     ]
    }
   ],
   "source": [
    "# Train the model, with some of the data reserved for validation\n",
    "\n",
    "history = model.fit(train_data, train_targets, epochs=100, validation_split=0.15,\n",
    "                   batch_size=64, verbose=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "45/1 - 0s - loss: 0.5323 - mse: 0.5095\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[0.5160316003693475, 0.50951207]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Evaluate the model on the test set\n",
    "\n",
    "model.evaluate(test_data, test_targets, verbose=2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Plot the learning curves"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the training and validation loss\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.plot(history.history['loss'])\n",
    "plt.plot(history.history['val_loss'])\n",
    "plt.title('Loss vs. epochs')\n",
    "plt.ylabel('Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.legend(['Training', 'Validation'], loc='upper right')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "<a id=\"coding_tutorial_3\"></a>\n",
    "## Introduction to callbacks"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Example training callback"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Write a custom callback\n",
    "from tensorflow.keras.callbacks import Callback\n",
    "\n",
    "class TrainingCallback(Callback):\n",
    "    \n",
    "    def on_train_begin(self, logs=None):\n",
    "        print(\"Starting training...\")\n",
    "    \n",
    "    def on_epoch_begin(self, epoch, logs=None):\n",
    "#         print(\"epoch type: \", type(epoch))\n",
    "        print(\"Starting epoch: \")\n",
    "    \n",
    "    def on_train_batch_begin(self, batch, logs=None):\n",
    "        print(\"Training: Starting batch\", batch)\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        print(\"Training: Finished batch \", batch)\n",
    "    \n",
    "    def on_epoch_end(self, epoch, logs=None):\n",
    "        print(\"Finished epoch: \")\n",
    "    \n",
    "    def on_train_end(self, logs=None):\n",
    "        print(\"Finsihed training\")\n",
    "        \n",
    "class TestingCallback(Callback):\n",
    "    \n",
    "    def on_test_begin(self, logs=None):\n",
    "        print(\"Starting testing...\")\n",
    "    \n",
    "    def on_test_batch_begin(self, batch, logs=None):\n",
    "        print(\"Testing: Starting batch: \", batch)\n",
    "    \n",
    "    def on_test_batch_end(self, batch, logs=None):\n",
    "        print(\"Testing: Finished batch \", batch)\n",
    "    \n",
    "    def on_test_end(self, logs=None):\n",
    "        print(\"Finsihed training\")\n",
    "\n",
    "class PredictionCallback(Callback):\n",
    "    \n",
    "    def on_predict_begin(self, logs=None):\n",
    "        print(\"Starting testing...\")\n",
    "    \n",
    "    def on_predict_batch_begin(self, batch, logs=None):\n",
    "        print(\"Testing: Starting batch: \", batch)\n",
    "    \n",
    "    def on_predict_batch_end(self, batch, logs=None):\n",
    "        print(\"Testing: Finished batch \", batch)\n",
    "    \n",
    "    def on_predict_end(self, logs=None):\n",
    "        print(\"Finsihed training\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Re-build the model\n",
    "model = get_regularised_model(1e-5, 0.3)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Compile the model\n",
    "model.compile(optimizer='adam', loss=\"mse\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Train the model with the callback"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 397 samples\n",
      "Starting training...\n",
      "Starting epoch: \n",
      "Epoch 1/3\n",
      "Training: Starting batch 0\n",
      "Training: Finished batch  0\n",
      "Training: Starting batch 1\n",
      "Training: Finished batch  1\n",
      "Training: Starting batch 2\n",
      "Training: Finished batch  2\n",
      "Training: Starting batch 3\n",
      "Training: Finished batch  3\n",
      "Finished epoch: \n",
      "397/397 - 2s - loss: 1.0120\n",
      "Starting epoch: \n",
      "Epoch 2/3\n",
      "Training: Starting batch 0\n",
      "Training: Finished batch  0\n",
      "Training: Starting batch 1\n",
      "Training: Finished batch  1\n",
      "Training: Starting batch 2\n",
      "Training: Finished batch  2\n",
      "Training: Starting batch 3\n",
      "Training: Finished batch  3\n",
      "Finished epoch: \n",
      "397/397 - 0s - loss: 0.9890\n",
      "Starting epoch: \n",
      "Epoch 3/3\n",
      "Training: Starting batch 0\n",
      "Training: Finished batch  0\n",
      "Training: Starting batch 1\n",
      "Training: Finished batch  1\n",
      "Training: Starting batch 2\n",
      "Training: Finished batch  2\n",
      "Training: Starting batch 3\n",
      "Training: Finished batch  3\n",
      "Finished epoch: \n",
      "397/397 - 0s - loss: 0.9531\n",
      "Finsihed training\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<tensorflow.python.keras.callbacks.History at 0x7fdf187131d0>"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Train the model, with some of the data reserved for validation\n",
    "model.fit(train_data, train_targets, epochs=3, batch_size=128, verbose=2,\n",
    "          callbacks=[TrainingCallback()])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Starting testing...\n",
      "Testing: Starting batch:  0\n",
      "Testing: Finished batch  0\n",
      "Testing: Starting batch:  1\n",
      "Testing: Finished batch  1\n",
      "45/1 - 0s - loss: 0.9252\n",
      "Finsihed training\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.7964840888977051"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Evaluate the model\n",
    "model.evaluate(test_data, test_targets, verbose=2, callbacks=[TestingCallback()])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Starting testing...\n",
      "Testing: Starting batch:  0\n",
      "Testing: Finished batch  0\n",
      "Testing: Starting batch:  1\n",
      "Testing: Finished batch  1\n",
      "45/1 - 0s\n",
      "Finsihed training\n",
      "[[-0.02448561]\n",
      " [ 0.20731583]\n",
      " [-0.03765511]\n",
      " [-0.04125059]\n",
      " [-0.05231973]\n",
      " [-0.05533513]\n",
      " [-0.04454084]\n",
      " [ 0.21913707]\n",
      " [-0.0535206 ]\n",
      " [ 0.13774759]\n",
      " [-0.03425982]\n",
      " [ 0.04001885]\n",
      " [ 0.24079873]\n",
      " [-0.03751414]\n",
      " [-0.04958687]\n",
      " [-0.05663105]\n",
      " [-0.02860111]\n",
      " [ 0.11487025]\n",
      " [ 0.33680138]\n",
      " [-0.01583669]\n",
      " [-0.02726536]\n",
      " [ 0.19460447]\n",
      " [-0.03435583]\n",
      " [ 0.04279991]\n",
      " [ 0.2892934 ]\n",
      " [ 0.19231959]\n",
      " [ 0.10477921]\n",
      " [ 0.14043073]\n",
      " [-0.04207925]\n",
      " [ 0.00590488]\n",
      " [-0.0517059 ]\n",
      " [ 0.22543724]\n",
      " [ 0.15902328]\n",
      " [ 0.22733787]\n",
      " [ 0.13296726]\n",
      " [ 0.24650419]\n",
      " [-0.00910672]\n",
      " [ 0.3454434 ]\n",
      " [-0.01965589]\n",
      " [-0.03395183]\n",
      " [ 0.07930188]\n",
      " [ 0.26753175]\n",
      " [-0.05414654]\n",
      " [ 0.15359747]\n",
      " [-0.05225413]]\n"
     ]
    }
   ],
   "source": [
    "# Make predictions with the model\n",
    "print(model.predict(test_data, verbose=2, callbacks=[PredictionCallback()]))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "<a id=\"coding_tutorial_4\"></a>\n",
    "## Early stopping / patience"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Re-train the models with early stopping"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 337 samples, validate on 60 samples\n",
      "Epoch 1/100\n",
      "337/337 - 1s - loss: 1.0175 - val_loss: 0.8272\n",
      "Epoch 2/100\n",
      "337/337 - 0s - loss: 0.9090 - val_loss: 0.7542\n",
      "Epoch 3/100\n",
      "337/337 - 0s - loss: 0.7642 - val_loss: 0.6866\n",
      "Epoch 4/100\n",
      "337/337 - 0s - loss: 0.7151 - val_loss: 0.6814\n",
      "Epoch 5/100\n",
      "337/337 - 0s - loss: 0.6966 - val_loss: 0.8288\n",
      "Epoch 6/100\n",
      "337/337 - 0s - loss: 0.7384 - val_loss: 0.7377\n"
     ]
    }
   ],
   "source": [
    "# Re-train the unregularised model\n",
    "\n",
    "unregualired_model = get_model()\n",
    "unregualired_model.compile(optimizer='adam', loss='mse')\n",
    "unreg_histroy = unregualired_model.fit(train_data, train_targets, epochs=100, validation_split=0.15, batch_size=64, verbose=2,\n",
    "                                       callbacks=[tf.keras.callbacks.EarlyStopping(patience=2)]\n",
    "                    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 337 samples, validate on 60 samples\n",
      "Epoch 1/100\n",
      "337/337 - 2s - loss: 1.0289 - val_loss: 0.8530\n",
      "Epoch 2/100\n",
      "337/337 - 0s - loss: 0.9821 - val_loss: 0.7678\n",
      "Epoch 3/100\n",
      "337/337 - 0s - loss: 0.8555 - val_loss: 0.6145\n",
      "Epoch 4/100\n",
      "337/337 - 0s - loss: 0.6814 - val_loss: 0.5242\n",
      "Epoch 5/100\n",
      "337/337 - 0s - loss: 0.5998 - val_loss: 0.5115\n",
      "Epoch 6/100\n",
      "337/337 - 0s - loss: 0.5605 - val_loss: 0.5098\n",
      "Epoch 7/100\n",
      "337/337 - 0s - loss: 0.5211 - val_loss: 0.4944\n",
      "Epoch 8/100\n",
      "337/337 - 0s - loss: 0.5152 - val_loss: 0.5004\n",
      "Epoch 9/100\n",
      "337/337 - 0s - loss: 0.5040 - val_loss: 0.5046\n"
     ]
    }
   ],
   "source": [
    "# Evaluate the model on the test set\n",
    "regularised_model = get_regularised_model(1e-8, 0.2)\n",
    "regularised_model.compile(optimizer='adam', loss='mse')\n",
    "reg_history = regularised_model.fit(train_data, train_targets, epochs=100,\n",
    "                                   validation_split=0.15, batch_size=64,\n",
    "                                   verbose=2,\n",
    "                                   callbacks=[tf.keras.callbacks.EarlyStopping(patience=2)])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "45/1 - 0s - loss: 0.5943\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.5303480108579"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Re-train the regularised model\n",
    "regularised_model.evaluate(test_data,test_targets, verbose=2)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Evaluate the model on the test set\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Plot the learning curves"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the training and validation loss\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "fig = plt.figure(figsize=(12, 5))\n",
    "\n",
    "fig.add_subplot(121)\n",
    "\n",
    "plt.plot(unreg_histroy.history['loss'])\n",
    "plt.plot(unreg_histroy.history['val_loss'])\n",
    "plt.title('Unregularised model: loss vs. epochs')\n",
    "plt.ylabel('Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.legend(['Training', 'Validation'], loc='upper right')\n",
    "\n",
    "fig.add_subplot(122)\n",
    "\n",
    "plt.plot(reg_history.history['loss'])\n",
    "plt.plot(reg_history.history['val_loss'])\n",
    "plt.title('Regularised model: loss vs. epochs')\n",
    "plt.ylabel('Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.legend(['Training', 'Validation'], loc='upper right')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#### Early Stopping \n",
    "\n",
    "from tensorflow.keras.models imprt Sequential\n",
    "from tensorflow.keras.layers import Conv1D, Flatten, Dense, MaxPooling2D\n",
    "from tensorflow.keras.callbacks import EarlyStopping\n",
    "\n",
    "model = Sequential()\n",
    "model.add(Conv1D(16, 5, activation='relu', input_shape=(128,1)))\n",
    "model.add(MaxPooling1D(4))\n",
    "model.add(Flatten())\n",
    "model.add(Dense(10, activation='softmax'))\n",
    "\n",
    "model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n",
    "\n",
    "early_stopping = EarlyStopping(monitor='val_loss',\n",
    "                              patience=5,\n",
    "                              min_delta=0.01,\n",
    "                               mode='max'\n",
    "                              )\n",
    "\n",
    "# monitor --> which performance metric do we need to use to decide when to terminate the training.\n",
    "#Example: val_loss, val_accuracy, loss, ...\n",
    "# the string used in monitor can be found in history.history.keys\n",
    "\n",
    "'''\n",
    "patience: is used to monitor if the performance gets worst from one epoch\n",
    "to another. By default, the value is 0. If set to 5, then the callback will \n",
    "monitor the performance for 5 epochs can the stop the training. \n",
    "In this case, the callback will monitor the \"monitor\" if there is no improvement in the training \n",
    "for 5 continous epochs, then it will terminate the training. \n",
    "\n",
    "min_delta: this is used to measure the least number by which the \"monitor improves\".\n",
    "In this case, the validation_loss must decrease by atleast 0.01 in an epoch.\n",
    "\n",
    "mode: Mode is used to monitor the choice of the quantitiy we're monitoring. \n",
    "in this case val_loss should be minimizing,\n",
    "We are monitoring the improvement in the \"monitor\", which could be an increase or decrease. \n",
    "example: monitor='val_acc' --> mode='max'\n",
    "                'val_loss' --> mode='min'\n",
    "                'loss' --> mode='min'\n",
    "                \n",
    "default value: 'auto' --> the callback knows whether the the metric should be increasing or decreasing based on what we are monitoring. \n",
    "'''\n",
    "\n",
    "model.fit(X_train, Y_train, validation_split=0.2, epochs=100, callbacks=[early_stopping])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
